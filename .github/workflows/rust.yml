on:
  push:
    branches:
      - master
# on:
#   push:
#     tags:
#       - v[0-9]+.[0-9]+.[0-9]+

name: Continuous Integration

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  quickcheck:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.rustversion.outputs.rustversion }}
    steps:
    - uses: actions/checkout@v2
    - run: cargo check
    - run: cargo pkgid
    - run: 'echo "$(cargo pkgid | cut -d# -f2)"'
    - id: rustversion
      run: 'echo "::set-output name=rustversion::$(cargo pkgid | cut -d# -f2)"'

  build:
    needs: quickcheck
    name: 'build-${{matrix.os}}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build
    - name: Run tests
      run: cargo test
  
  debbuild:
    needs: [build]
    runs-on: ubuntu-latest
    name: Amd64Deb
    steps:
    - uses: actions/checkout@v2
    - name: BuildDeb
      id: debbuild
      uses: docker://xudesheng/rustbuilder:x86_64-musl-1.59.0-deb-v1
      with:
        args: cargo deb
    - name: Upload Deb Artifact
      uses: actions/upload-artifact@v2
      with:
        name: amd64deb
        path: ./target/debian/*
  
  amd64binaries:
    needs: [build, quickcheck]
    runs-on: ubuntu-latest
    name: Amd64StaticBinaries
    steps:
    - uses: actions/checkout@v2
    - name: StaticBinaryBuild
      id: amd64staticbuild
      uses: docker://xudesheng/rustbuilder:x86_64-musl-1.59.0-deb-v1
      with:
        args: cargo build --release --target=x86_64-unknown-linux-musl
    
    - name: Upload workflowtest Artifact
      uses: actions/upload-artifact@v2
      with:
        name: amd64binaries
        path: ./target/x86_64-unknown-linux-musl/release/workflowtest
    - run: 'zip -j amd64binaries.zip ./target/x86_64-unknown-linux-musl/release/workflowtest'
    - name: Upload Zip Artifact
      uses: actions/upload-artifact@v2
      with:
        name: amd64binaries
        path: amd64binaries.zip
  
  update_release_draft:
    needs: [quickcheck,  amd64binaries, debbuild ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: '${{ needs.quickcheck.outputs.version }}'
          release_name: Release ${{ needs.quickcheck.outputs.version }}
          body: 'Change Me'
          draft: true
          prerelease: false
      - uses: actions/download-artifact@v2
      - run: ls -lha
      - name: Upload amd64 deb Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./amd64deb/workflowtest_${{needs.quickcheck.outputs.version}}_amd64.deb
          asset_name: 'workflowtest_${{needs.quickcheck.outputs.version}}_amd64.deb'
          asset_content_type: application/vnd.debian.binary-package
      
      - name: Upload Amd64 Static Binary Zip Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./amd64binaries/amd64binaries.zip
          asset_name: 'workflowtest_${{needs.quickcheck.outputs.version}}_linux_amd64_binaries.zip'
          asset_content_type: application/zip

      
  upload-assets:
    name: ${{ matrix.target }}
    if: github.repository_owner == 'xudesheng'
    needs:
      # - create-release
      - update_release_draft
    strategy:
      matrix:
        include:
          # - target: x86_64-unknown-linux-gnu
          # - target: aarch64-unknown-linux-gnu
          # - target: aarch64-apple-darwin
          #   os: macos-latest
          # - target: x86_64-pc-windows-gnu
          #   os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies (linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Install dependencies (MacOS)
        run: |
          brew install openssl
        if: matrix.os == 'macos-latest'
      
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: stable
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: workflowtest
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # CARGO_PROFILE_RELEASE_LTO: true
