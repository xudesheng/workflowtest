# on:
#   push:
#     branches:
#       - master
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

name: Continuous Integration

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  # create-release:
  #   if: github.repository_owner == 'xudesheng'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: taiki-e/github-actions/install-rust@main
  #       with:
  #         toolchain: stable
  #     - run: cargo package
  #     - uses: taiki-e/create-gh-release-action@v1
  #       with:
  #         changelog: CHANGELOG.md
  #         title: $version
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  quickcheck:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.rustversion.outputs.rustversion }}
    steps:
    - uses: actions/checkout@v2
    - run: cargo check
    - run: cargo pkgid
    - run: 'echo "$(cargo pkgid | cut -d# -f2)"'
    - run: 'echo github.GITHUB_REF="${{ github.GITHUB_REF }}"'
    - id: rustversion
      run: 'echo "::set-output name=rustversion::$(cargo pkgid | cut -d# -f2)"'

  build:
    needs: quickcheck
    name: 'build-${{matrix.os}}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build
    - name: Run tests
      run: cargo test
  
  debbuild:
    needs: [build]
    runs-on: ubuntu-latest
    name: Amd64Deb
    steps:
    - uses: actions/checkout@v2
    - name: BuildDeb
      id: debbuild
      uses: docker://xudesheng/rustbuilder:x86_64-musl-1.59.0-deb-v1
      with:
        args: cargo deb
    - name: Upload Deb Artifact
      uses: actions/upload-artifact@v2
      with:
        name: amd64deb
        path: ./target/debian/*
  
  amd64binaries:
    needs: [build, quickcheck]
    runs-on: ubuntu-latest
    name: Amd64StaticBinaries
    steps:
    - uses: actions/checkout@v2
    - name: StaticBinaryBuild
      id: amd64staticbuild
      uses: docker://xudesheng/rustbuilder:x86_64-musl-1.59.0-deb-v1
      with:
        args: cargo build --release --target=x86_64-unknown-linux-musl
    
    - name: Upload workflowtest Artifact
      uses: actions/upload-artifact@v2
      with:
        name: amd64binaries
        path: ./target/x86_64-unknown-linux-musl/release/workflowtest
    - run: 'zip -j amd64binaries.zip ./target/x86_64-unknown-linux-musl/release/workflowtest'
    - name: Upload Zip Artifact
      uses: actions/upload-artifact@v2
      with:
        name: amd64binaries
        path: amd64binaries.zip
  
  windowsbuild:
    name: windowsbuild
    if: github.repository_owner == 'xudesheng'
    needs:
      - build
      - quickcheck
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install 7Zip PowerShell Module
        shell: powershell
        run: Install-Module 7Zip4PowerShell -Force -Verbose
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: stable
      - name: check result
        run: |
          cargo build --release
  
          ls -l ./target/release/
      - name: Upload workflowtest Artifact
        uses: actions/upload-artifact@v2
        with:
          name: windowsbuild
          path: ./target/release/workflowtest.exe
      # - run: 'zip -j amd64-windowsbuild-binaries.zip ./target/release/workflowtest.exe'
      - run: 'powershell Compress-7Zip ./target/release/workflowtest.exe -ArchiveFileName amd64-windowsbuild-binaries.zip -Format Zip'
      - name: Upload windows build Zip Artifact
        uses: actions/upload-artifact@v2
        with:
          name: windowsbuild
          path: amd64-windowsbuild-binaries.zip

  macbuild:
    name: macbuild
    if: github.repository_owner == 'xudesheng'
    needs:
      - build
      - quickcheck
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies (MacOS)
        run: |
          brew install openssl
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: stable
      - name: check result
        run: |
          cargo build --release
          ls -l ./target/release/
          strip ./target/release/workflowtest
          ls -l ./target/release
      - name: Upload workflowtest Artifact
        uses: actions/upload-artifact@v2
        with:
          name: macbuild
          path: ./target/release/workflowtest
      - run: 'zip -j amd64-macbuild-binaries.zip ./target/release/workflowtest'
      - name: Upload mac build Zip Artifact
        uses: actions/upload-artifact@v2
        with:
          name: macbuild
          path: amd64-macbuild-binaries.zip

  update_release_draft:
    needs: [quickcheck,  amd64binaries, debbuild,windowsbuild,macbuild]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: '${{ needs.quickcheck.outputs.version }}'
          release_name: Release ${{ needs.quickcheck.outputs.version }}
          body: 'Change Me'
          draft: true
          prerelease: false
      - uses: actions/download-artifact@v2
      - run: ls -lha
      - name: Upload amd64 deb Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./amd64deb/workflowtest_${{needs.quickcheck.outputs.version}}_amd64.deb
          asset_name: 'workflowtest_${{needs.quickcheck.outputs.version}}_ubuntu_amd64.deb'
          asset_content_type: application/vnd.debian.binary-package
      
      - name: Upload Amd64 Static Binary Zip Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./amd64binaries/amd64binaries.zip
          asset_name: 'workflowtest_${{needs.quickcheck.outputs.version}}_linux_amd64_binaries.zip'
          asset_content_type: application/zip
      
      - name: Upload Amd64 Windows Binary Zip Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windowsbuild/amd64-windowsbuild-binaries.zip
          asset_name: 'workflowtest_${{needs.quickcheck.outputs.version}}_windows_amd64_binaries.zip'
          asset_content_type: application/zip

      - name: Upload Amd64 Mac Binary Zip Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macbuild/amd64-macbuild-binaries.zip
          asset_name: 'workflowtest_${{needs.quickcheck.outputs.version}}_mac_amd64_binaries.zip'
          asset_content_type: application/zip
      
  
